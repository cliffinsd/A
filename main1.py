import sqlite3
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("6288603114:AAFvvlzV2oZoojhwMdEyTfRniFNGWdp7bU0")

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
whitelist = [810397112, 832295315, 5214851916]
user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = sqlite3.connect('rentals.db', check_same_thread=False)
cursor = db.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS rentals
                (id INTEGER PRIMARY KEY AUTOINCREMENT,
                 user_id INTEGER,
                 type TEXT,
                 name TEXT,
                 amount INTEGER,
                 hours INTEGER,
                 timestamp TEXT)''')
db.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_access(user_id):
    return user_id in whitelist

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üì¶ –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä", callback_data="add_accessory"),
        InlineKeyboardButton("üõ°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞", callback_data="add_guard")
    )
    keyboard.add(
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤", callback_data="list_accessories"),
        InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤", callback_data="list_guards")
    )
    keyboard.add(InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã", callback_data="earnings"))
    return keyboard

# –ú–µ–Ω—é –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
def accessory_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    cursor.execute("SELECT DISTINCT name FROM rentals WHERE type = 'accessory' AND name IS NOT NULL")
    accessories = [row[0] for row in cursor.fetchall()]
    for acc in accessories:
        keyboard.add(InlineKeyboardButton(f"üì¶ {acc}", callback_data=f"acc_{acc}"))
        keyboard.add(InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {acc}", callback_data=f"del_acc_{acc}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

# –ú–µ–Ω—é –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤
def guard_menu():
    keyboard = InlineKeyboardMarkup(row_width=1)
    cursor.execute("SELECT DISTINCT name FROM rentals WHERE type = 'guard' AND name IS NOT NULL")
    guards = [row[0] for row in cursor.fetchall()]
    for guard in guards:
        keyboard.add(InlineKeyboardButton(f"üõ°Ô∏è {guard}", callback_data=f"guard_{guard}"))
        keyboard.add(InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {guard}", callback_data=f"del_guard_{guard}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤
def hours_menu(item_type, name, amount):
    keyboard = InlineKeyboardMarkup(row_width=3)
    hours = [1, 2, 3, 4, 5, 6, 8, 12, 24]
    for h in hours:
        keyboard.add(InlineKeyboardButton(f"{h} —á", callback_data=f"{item_type}_hours_{name}_{amount}_{h}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

# –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def calculate_earnings(user_id, period):
    cursor.execute("SELECT type, amount, hours, timestamp FROM rentals WHERE amount > 0 AND hours > 0")
    rows = cursor.fetchall()
    total = 0
    now = datetime.now()
    for row in rows:
        amount, hours, item_type, timestamp = row[1], row[2], row[0], datetime.fromisoformat(row[3])
        commission = 0.08 if item_type == "accessory" else 0.12
        net_amount = amount * (1 - commission) * hours
        if period == "day" and now - timestamp <= timedelta(hours=24):
            total += net_amount
        elif period == "week" and now - timestamp <= timedelta(days=7):
            total += net_amount
        elif period == "month" and now - timestamp <= timedelta(days=30):
            total += net_amount
        elif period == "all":
            total += net_amount
    return total

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–∞—Ö
def format_earnings_message(user_id):
    day = calculate_earnings(user_id, "day")
    week = calculate_earnings(user_id, "week")
    month = calculate_earnings(user_id, "month")
    all_time = calculate_earnings(user_id, "all")
    return (f"üí∏ <b>–î–æ—Ö–æ–¥—ã</b> üí∏\n"
            f"üïí –ó–∞ 24 —á–∞—Å–∞: {day:.2f}\n"
            f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {week:.2f}\n"
            f"üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü: {month:.2f}\n"
            f"üìà –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {all_time:.2f}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    if not check_access(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    bot.send_message(message.chat.id, "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞—Ä–µ–Ω–¥—ã!</b>", parse_mode="HTML", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    if not check_access(user_id):
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    data = call.data.split("_")
    if call.data == "add_accessory":
        bot.edit_message_text("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞:", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML")
        user_states[user_id] = "waiting_acc_name"
    elif call.data == "add_guard":
        bot.edit_message_text("üõ°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞:", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML")
        user_states[user_id] = "waiting_guard_name"
    elif call.data == "list_accessories":
        bot.edit_message_text("üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤</b>", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML", reply_markup=accessory_menu())
    elif call.data == "list_guards":
        bot.edit_message_text("üë• <b>–°–ø–∏—Å–æ–∫ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤</b>", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML", reply_markup=guard_menu())
    elif call.data == "earnings":
        bot.edit_message_text(format_earnings_message(user_id), chat_id=call.message.chat.id, message_id=–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ call.message.message_id, parse_mode="HTML", reply_markup=main_menu())
    elif call.data.startswith("acc_") and not call.data.startswith("del_acc_") and not call.data.startswith("acc_hours_"):
        acc_name = call.data[4:]
        bot.edit_message_text(
            f"üì¶ <b>{acc_name}</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞—Ä–µ–Ω–¥—ã –∑–∞ —á–∞—Å:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )
        user_states[user_id] = f"waiting_acc_amount_{acc_name}"
    elif call.data.startswith("guard_") and not call.data.startswith("del_guard_") and not call.data.startswith("guard_hours_"):
        guard_name = call.data[6:]
        bot.edit_message_text(
            f"üõ°Ô∏è <b>{guard_name}</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞—Ä–µ–Ω–¥—ã –∑–∞ —á–∞—Å:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )
        user_states[user_id] = f"waiting_guard_amount_{guard_name}"
    elif call.data.startswith("del_acc_"):
        acc_name = call.data[8:]
        cursor.execute("DELETE FROM rentals WHERE type = 'accessory' AND name = ?", (acc_name,))
        db.commit()
        bot.edit_message_text("üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤</b>", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML", reply_markup=accessory_menu())
    elif call.data.startswith("del_guard_"):
        guard_name = call.data[10:]
        cursor.execute("DELETE FROM rentals WHERE type = 'guard' AND name = ?", (guard_name,))
        db.commit()
        bot.edit_message_text("üë• <b>–°–ø–∏—Å–æ–∫ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤</b>", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML", reply_markup=guard_menu())
    elif call.data.startswith("acc_hours_") or call.data.startswith("guard_hours_"):
        item_type = "accessory" if call.data.startswith("acc_") else "guard"
        name, amount, hours = data[2], int(data[3]), int(data[4])
        cursor.execute(
            "INSERT INTO rentals (user_id, type, name, amount, hours, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, item_type, name, amount, hours, datetime.now().isoformat())
        )
        db.commit()
        bot.edit_message_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞—Ä–µ–Ω–¥–∞: <b>{name}</b> –Ω–∞ {hours} —á–∞—Å–æ–≤ –∑–∞ {amount}",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="HTML",
            reply_markup=main_menu()
        )
    elif call.data == "back":
        bot.edit_message_text("üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML", reply_markup=main_menu())
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    if not check_access(user_id):
        bot.send_message(message.chat.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    state = user_states.get(user_id)
    if state == "waiting_acc_name":
        cursor.execute("SELECT name FROM rentals WHERE type = 'accessory' AND name = ?", (message.text,))
        if cursor.fetchone():
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ê–∫—Å–µ—Å—Å—É–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", parse_mode="HTML", reply_markup=main_menu())
        else:
            cursor.execute("INSERT INTO rentals (user_id, type, name, amount, hours, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
                          (user_id, "accessory", message.text, 0, 0, datetime.now().isoformat()))
            db.commit()
            bot.send_message(message.chat.id, f"‚úÖ –ê–∫—Å–µ—Å—Å—É–∞—Ä <b>{message.text}</b> –¥–æ–±–∞–≤–ª–µ–Ω", parse_mode="HTML", reply_markup=main_menu())
        user_states.pop(user_id, None)
    elif state == "waiting_guard_name":
        cursor.execute("SELECT name FROM rentals WHERE type = 'guard' AND name = ?", (message.text,))
        if cursor.fetchone():
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—Ö—Ä–∞–Ω–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", parse_mode="HTML", reply_markup=main_menu())
        else:
            cursor.execute("INSERT INTO rentals (user_id, type, name, amount, hours, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
                          (user_id, "guard", message.text, 0, 0, datetime.now().isoformat()))
            db.commit()
            bot.send_message(message.chat.id, f"‚úÖ –û—Ö—Ä–∞–Ω–Ω–∏–∫ <b>{message.text}</b> –¥–æ–±–∞–≤–ª–µ–Ω", parse_mode="HTML", reply_markup=main_menu())
        user_states.pop(user_id, None)
    elif state and state.startswith("waiting_acc_amount_"):
        try:
            amount = int(message.text)
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            acc_name = state[19:]
            bot.send_message(
                message.chat.id,
                f"üì¶ <b>{acc_name}</b>\n–°—É–º–º–∞: {amount}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",
                parse_mode="HTML",
                reply_markup=hours_menu("acc", acc_name, amount)
            )
            user_states.pop(user_id, None)
        except ValueError:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")
    elif state and state.startswith("waiting_guard_amount_"):
        try:
            amount = int(message.text)
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            guard_name = state[21:]
            bot.send_message(
                message.chat.id,
                f"üõ°Ô∏è <b>{guard_name}</b>\n–°—É–º–º–∞: {amount}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",
                parse_mode="HTML",
                reply_markup=hours_menu("guard", guard_name, amount)
            )
            user_states.pop(user_id, None)
        except ValueError:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
